# Local Coding Assistant

**The Local Coding Assistant (LCA)** is an open Python framework for developing AI-driven developer assistants that run locally and interact with your environment safely.
It combines modular AI agents, tool schemas, and an optional MCP (Model Context Protocol) interface for integration with IDEs and local workflows.

---

## Goals
- Provide a **local-first, privacy-respecting** AI coding assistant.
- Support **modular tool development** with schema-defined interfaces.
- Enable **agent orchestration** using LangGraph and MCP.
- Serve as a **clean, educational example** of modern Python project architecture.

---

## Tech Stack
   Category          | Choice/Tool                     |
 |-------------------|----------------------------------|
 | Language          | Python (3.12+)                   |
 | Env & packaging   | uv, pyproject.toml, ruff, mypy, pytest |
 | CI/CD             | GitHub Actions                   |
 | Tooling           | Pre-commit hooks, Docker-ready   |
 | Agent Runtime     | LangGraph                        |
 | Tool Interface    | Schema-driven tools (pydantic models for input/output) |
 | Optional Integration | MCP servers for IDE and external orchestration |

---

## Concepts

### Agent
- Orchestrates reasoning and tool usage using **LangGraph**.
- Can call **schema-defined tools** through the Tool Registry.
- Capable of reasoning and chaining tasks, both synchronous and async.

### Tools
- Each tool is a **pydantic-based class** exposing input/output schemas.
- Registered automatically through **ToolRegistry**.
- Can be **internal (Python-only)** or **external MCP tools**.

### MCP (Model Context Protocol)
- Enables interoperability between LCA and external clients (like IDEs or chat UIs).
- Optional layer; can be added incrementally.

---

## Testing
- **Unit tests** with pytest.
- **Static analysis** with ruff, mypy.
- **GitHub Actions** for automated linting, testing, and pre-commit enforcement.

---

## Development Workflow
- Use `uv run` for development commands.
- Write schema-based tools in `src/lca/tools`.
- Register them in **ToolRegistry**.
- Add test coverage under `src/lca/tests`.
- Update `llms.txt` after major architecture changes.

---

## LLM Usage
LLMs reading this file can:
- Infer the modular relationships between **agent, tools, and core**.
- Identify where to add or extend features.
- Understand conventions for **schema-driven design** and **agent orchestration**.
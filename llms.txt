# Local Coding Assistant (LOCCA)

A local-first Python project for building a simple, extensible coding assistant. The current implementation is intentionally minimal and designed to be evolved.

---

## Goals
- Local-first, privacy-respecting assistant.
- Minimal, readable architecture with clear seams for extension.
- Solid developer ergonomics: uv, pytest, ruff, pre-commit.

---

## Current Architecture Map

- Package: `src/local_coding_assistant/`
  - `agent/`
    - `llm_manager.py`: small facade; `LLMManager.ask(text, tools)` echoes text and counts tools.
  - `tools/`
    - `tool_registry.py`: in-memory registry (list-like); supports `register`, iteration, and `len()`.
  - `runtime/`
    - `runtime_manager.py`: placeholder with `start()`/`stop()` no-ops.
  - `core/`
    - `app_context.py`: simple named resource registry (`register`, `get`, `__getitem__`, `__contains__`).
    - `bootstrap.py`: wires `LLMManager`, `ToolRegistry`, `RuntimeManager` into `AppContext`.
    - `assistant.py`: `Assistant.run_query(text, verbose)` uses LLM and tools from context.
  - `cli/`
    - `main.py`: Typer app; includes subcommands from `cli/commands/`.
    - `commands/run.py`: `run query <text> [--verbose] [--model] [--log-level]` — calls `Assistant` and prints response.
    - `commands/list_tools.py`, `commands/config.py`, `commands/serve.py`: basic implementations.

---

## CLI
- Entry point: `[project.scripts] locca = "local_coding_assistant.cli:main"`
- Example (uv):
  - `uv run locca run query "Hello" --verbose --model dummy --log-level DEBUG`
- Example (module):
  - `python -m local_coding_assistant.cli.main run query "Hello"`

---

## Testing
- Framework: `pytest` with coverage configured in `pyproject.toml`.
- Layout:
  - `tests/unit/`: fast tests (e.g., `test_tools_registry.py`, `test_llm_manager.py`, `test_runtime_manager.py`).
  - `tests/integration/`: uses `tests/integration/conftest.py` fixtures (`ctx`, `assistant`, CLI `app`, `cli_runner`).
  - `tests/e2e/`: CLI end-to-end via Typer `CliRunner` (`test_cli_run.py`, `test_cli_commands.py`).
- Run via uv/taskipy:
  - `uv run pytest -v` or tasks in `[tool.taskipy.tasks]`:
    - `uv run task test-unit`
    - `uv run task test-integration`
    - `uv run task test-e2e`
    - `uv run task test-all`

---

## Pre-commit
- Config: `.pre-commit-config.yaml`
  - Lint & format with ruff on commit.
  - Unit tests on pre-commit (fast path).
  - Integration & e2e tests on pre-push.
- Install:
  - `pre-commit install`
  - `pre-commit install --hook-type pre-push`

---

## Conventions
- Imports assume `src/` on `PYTHONPATH`; tests ensure this via `tests/conftest.py`.
- Keep `bootstrap()` as the composition root for dependency wiring.
- `Assistant.run_query()` is the main integration surface for agent logic.

---

## roadmap (suggested)
- Tool model schemas (optional): introduce pydantic types for tool I/O.
- Real LLM backend(s): swap `LLMManager.ask()` for providers (OpenAI/local) behind an interface.
- Tool discovery: dynamic loading, metadata, validation.
- Runtime: background workers/queues, async support in `RuntimeManager`.
- CLI growth: `list-tools`, `serve`, and `config` subcommands with real behavior.
- Optional MCP integration once core is stable.

---

## Quick Links (files mentioned)
- `src/local_coding_assistant/core/bootstrap.py`
- `src/local_coding_assistant/core/assistant.py`
- `src/local_coding_assistant/tools/tool_registry.py`
- `src/local_coding_assistant/agent/llm_manager.py`
- `src/local_coding_assistant/cli/main.py`

This document is for both humans and LLMs to quickly understand the project’s current shape and intended extension points. Update after any major architectural changes.
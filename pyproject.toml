[build-system]
requires = ["uv_build>=0.8.23,<0.9.0"]
build-backend = "uv_build"

[project]
name = "local-coding-assistant"
version = "0.1.0"
description = "An AI-powered local coding assistant with plugin support"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    { name = "NenoLich", email = "ne0fun907@gmail.com" },
]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Environment :: Console",
    "Topic :: Software Development",
    "Typing :: Typed",
]
dependencies = [
    "typer>=0.19.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.6.0",
    "ty>=0.0.1a20",
    "pre-commit>=3.7.0",
    "black>=24.0.0",
    "isort>=5.13.0",
]

[project.scripts]
local-assistant = "local_coding_assistant.cli:main"

[tool.taskipy.tasks]
test-unit = "pytest -v tests/unit"
test-integration = "pytest -v tests/integration"
test-e2e = "pytest -v tests/e2e"
test-all = "pytest -v tests"

[tool.ruff.lint]
select = [
    "E", "F", "I", "B", "A",  # Base rules
    "UP", "N", "Q", "RUF",      # Additional useful rules
]
ignore = [
    "E501",  # Line length (handled by black)
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["local_coding_assistant"]

[tool.ty.rules]
unused-ignore-comment = "warn"
redundant-cast = "ignore"
possibly-unbound-attribute = "error"
possibly-unbound-import = "error"

[[tool.ty.overrides]]
include = ["tests/**", "**/test_*.py"]

[tool.ty.overrides.rules]
possibly-unresolved-reference = "ignore"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=local_coding_assistant --cov-report=term-missing"
filterwarnings = ["ignore::DeprecationWarning"]

[coverage.run]
source = ["src"]
omit = ["tests/*"]

[coverage.report]
show_missing = true
skip_covered = true

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
    "taskipy>=1.14.1",
]
